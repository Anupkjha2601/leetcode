C++ Solution

class Solution {
public:
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& edges) {
        vector<int> reachable(n, true);

        for (const auto& edge : edges) {
            reachable[edge[1]] = false;
        }

        for (const auto& edge : edges) {
            if (!reachable[edge[0]]) {
                reachable[edge[1]] = false;
            }
        }

        vector<int> result;
        for (int i = 0; i < n; ++i) {
            if (reachable[i]) {
                result.push_back(i);
            }
        }

        return result;
    }
};

JAVA Solution

import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {
        boolean[] reachable = new boolean[n];

        for (List<Integer> edge : edges) {
            reachable[edge.get(1)] = true;
        }

        for (List<Integer> edge : edges) {
            if (!reachable[edge.get(0)]) {
                reachable[edge.get(1)] = false;
            }
        }

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            if (reachable[i]) {
                result.add(i);
            }
        }

        return result;
    }
}










